swagger: "2.0"
info:
  title: "Domain Controller Connector"
  version: "1.0.0"
  description: "Domain controller connector interface."
  contact:
    name: "Christian Bremer"
    email: "bremersee@googlemail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "api.bremersee.org"
basePath: "/dc-con"
tags:
  - name: "domain-controller-connector"
    description: "Domain controller connector endpoint."
schemes:
  - "http"
  - "https"
paths:
  /api/info:
    get:
      tags:
        - "domain-controller-connector"
      summary: "Get domain controller server info."
      description: "Get domain controller server info."
      operationId: "getInfo"
      produces:
        - "application/json"
      responses:
        200:
          description: "The domain controller server info."
          schema:
            $ref: "#/definitions/Info"
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/groups:
    get:
      tags:
        - "domain-controller-connector"
      summary: "Get all domain groups."
      description: "Get all domain groups."
      operationId: "getGroups"
      produces:
        - "application/json"
      responses:
        200:
          description: "A list with domain group items."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DomainGroupItem"
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    post:
      tags:
        - "domain-controller-connector"
      summary: "Add a domain group."
      operationId: "addGroup"
      parameters:
        - name: "group"
          description: "The domain group to add."
          in: "body"
          schema:
            $ref: "#/definitions/DomainGroup"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The added domain group."
          schema:
            $ref: "#/definitions/DomainGroup"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        406:
          description: "Already exists"
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/groups/{groupName}:
    get:
      tags:
      - "domain-controller-connector"
      summary: "Get a domain group by name."
      operationId: "getGroupByName"
      parameters:
        - name: "groupName"
          description: "The domain group name."
          type: "string"
          required: true
          in: "path"
      produces:
        - "application/json"
      responses:
        200:
          description: "The domain group with the specified name."
          schema:
            $ref: "#/definitions/DomainGroup"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        404:
          description: "Not found"
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    delete:
      tags:
        - "domain-controller-connector"
      summary: "Delete a domain group."
      operationId: "deleteGroup"
      parameters:
        - name: "groupName"
          description: "The domain group name."
          type: "string"
          required: true
          in: "path"
      produces:
        - "application/json"
      responses:
        200:
          description: "Group does not exist or was successfully deleted."
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/groups/{groupName}/members:
    put:
      tags:
        - "domain-controller-connector"
      summary: "Update domain group members."
      operationId: "updateGroupMembers"
      parameters:
        - name: "groupName"
          description: "The domain group name."
          type: "string"
          required: true
          in: "path"
        - name: "members"
          description: "The domain group members."
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Names"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The updated domain group."
          schema:
            $ref: "#/definitions/DomainGroup"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        404:
          description: "Group not found."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/users:
    post:
      tags:
        - "domain-controller-connector"
      summary: "Add a domain user."
      operationId: "addUser"
      parameters:
        - name: "domainUser"
          description: "The domain user to add."
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/DomainUserAddRequest"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The added domain user."
          schema:
            $ref: "#/definitions/DomainUser"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/users/{userName}:
    get:
      tags:
        - "domain-controller-connector"
      summary: "Get a domain user by name."
      operationId: "getUser"
      parameters:
        - name: "userName"
          description: "The user name of the domain user."
          type: "string"
          required: true
          in: "path"
      produces:
        - "application/json"
      responses:
        200:
          description: "The domain user with the specified name."
          schema:
            $ref: "#/definitions/DomainUser"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        404:
          description: "User not found."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    patch:
      tags:
        - "domain-controller-connector"
      summary: "Updates a domain user."
      operationId: "updateUser"
      parameters:
        - name: "userName"
          description: "The user name of the domain user."
          type: "string"
          required: true
          in: "path"
        - name: "domainUser"
          description: "The update data of the domain user."
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/DomainUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The updated domain user."
          schema:
            $ref: "#/definitions/DomainUser"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        404:
          description: "User not found."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    delete:
      tags:
        - "domain-controller-connector"
      summary: "Deletes a domain user."
      operationId: "deleteUser"
      parameters:
        - name: "userName"
          description: "The user name of the domain user."
          type: "string"
          required: true
          in: "path"
      produces:
        - "application/json"
      responses:
        200:
          description: "User does not exist or was successfully deleted."
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        404:
          description: "User not found."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/users/{userName}/f/exists:
    get:
      tags:
        - "domain-controller-connector"
      summary: "Checks whether a domain user exists."
      operationId: "userExists"
      parameters:
        - name: "userName"
          description: "The user name of the domain user."
          type: "string"
          required: true
          in: "path"
      produces:
        - "application/json"
      responses:
        200:
          description: "True if the user exists otherwise false."
          schema:
            $ref: "#/definitions/BooleanWrapper"
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/users/{userName}/groups:
    put:
      tags:
        - "domain-controller-connector"
      summary: "Updates domain user groups."
      operationId: "updateUserGroups"
      parameters:
        - name: "userName"
          description: "The user name of the domain user."
          type: "string"
          required: true
          in: "path"
        - name: "groups"
          description: "The groups of the domain user."
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Names"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The updated domain user."
          schema:
            $ref: "#/definitions/DomainUser"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        404:
          description: "User not found."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/users/{userName}/password:
    put:
      tags:
        - "domain-controller-connector"
      summary: "Updates the password of the domain user."
      operationId: "updateUserPassword"
      parameters:
        - name: "userName"
          description: "The user name of the domain user."
          type: "string"
          required: true
          in: "path"
        - name: "newPassword"
          description: "The password of the domain user."
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/Password"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The password was successfully changed."
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        404:
          description: "User not found."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/dns/zones:
    get:
      tags:
        - "domain-controller-connector"
      summary: "Get all name server zones."
      description: "Get all name server zones."
      operationId: "getDnsZones"
      produces:
        - "application/json"
      responses:
        200:
          description: "A list with name server zones."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DnsZone"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    post:
      tags:
        - "domain-controller-connector"
      summary: "Create new name server zone."
      description: "Create new name server zone."
      operationId: "createDnsZone"
      parameters:
        - name: "request"
          in: "body"
          schema:
            $ref: "#/definitions/DnsZoneCreateRequest"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The zone was successfully created."
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    delete:
      tags:
        - "domain-controller-connector"
      summary: "Delete names server zone."
      description: "Delete name server zone."
      operationId: "deleteDnsZone"
      parameters:
        - name: "zoneName"
          in: "query"
          type: "string"
          required: true
      produces:
        - "application/json"
      responses:
        200:
          description: "The zone was successfully created."
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
  /api/dns/zones/records:
    get:
      tags:
        - "domain-controller-connector"
      summary: "Get all name server records of a zone."
      description: "Get all name server records of a zone."
      operationId: "getDnsRecords"
      parameters:
        - name: "zoneName"
          description: "The name server zone name."
          type: "string"
          required: true
          in: "query"
      produces:
        - "application/json"
      responses:
        200:
          description: "A list with name server records."
          schema:
            type: "array"
            items:
              $ref: "#/definitions/DnsEntry"
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    post:
      tags:
        - "domain-controller-connector"
      summary: "Create or delete name server record."
      description: "Create or delete name server record."
      operationId: "createOrDeleteDnsRecord"
      parameters:
        - name: "action"
          in: "query"
          type: string
          enum:
            - "CREATE"
            - "DELETE"
          required: true
        - name: "request"
          in: "body"
          schema:
            $ref: "#/definitions/DnsRecordRequest"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The name server record was successfully created."
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
    put:
      tags:
        - "domain-controller-connector"
      summary: "Update name server record."
      description: "Update name server record."
      operationId: "updateDnsRecord"
      parameters:
        - name: "request"
          in: "body"
          schema:
            $ref: "#/definitions/DnsRecordUpdateRequest"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        200:
          description: "The name server record was successfully created."
        400:
          description: "Bad request."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
        500:
          description: "Fatal server error."
          schema:
            $ref: './META-INF/swagger/exception-model.yml#/definitions/RestApiException'
definitions:
  BooleanWrapper:
    description: "Wrapper of a boolean value."
    type: "object"
    properties:
      value:
        type: "boolean"
        description: "The boolean value."
    required:
      - value
  Info:
    description: "A description of the domain controller."
    type: "object"
    properties:
      nameServerHost:
        type: "string"
        description: "The host name of the name server."
  Name:
    description: "A simple name or a distinguished name."
    type: "object"
    properties:
      value:
        type: "string"
        description: "The name."
      distinguishedName:
        type: "boolean"
        default: "false"
        description: "Is the name a distinguished name?"
    required:
      - value
  Names:
    type: "object"
    description: "A list with names."
    properties:
      values:
        type: "array"
        items:
          $ref: "#/definitions/Name"
        description: "The names."
  Common:
    type: "object"
    description: "Common attributes"
    properties:
      distinguishedName:
        type: "string"
        description: "The distinguished name in the active directory."
      created:
        type: "string"
        format: "date-time"
        description: "The creation date."
      modified:
        type: "string"
        format: "date-time"
        description: "The last modification date."
    discriminator: "_type"
  DomainGroupItem:
    description: "Domain group item."
    allOf:
      - $ref: "#/definitions/Common"
      - type: "object"
        properties:
          name:
            type: "string"
            description: "The name of the domain group."
    discriminator: "_type"
  DomainGroup:
    description: "Domain group."
    allOf:
      - $ref: "#/definitions/DomainGroupItem"
      - type: "object"
        properties:
          members:
            type: "array"
            items:
              $ref: "#/definitions/Name"
            description: "The members of the domain group."
  DomainUser:
    description: "Domain user."
    allOf:
      - $ref: "#/definitions/Common"
      - type: "object"
        properties:
          userName:
            type: "string"
            description: "The user name of the domain user."
          enabled:
            type: "boolean"
            description: "Is the domain user enabled?"
          passwordLastSet:
            type: "string"
            format: "date-time"
          displayName:
            type: "string"
          email:
            type: "string"
            format: "email"
            description: "The mail address of the domain user."
          mobile:
            type: "string"
            description: "The mobile number of the domain user."
          groups:
            type: "array"
            items:
              $ref: "#/definitions/Name"
            description: "The groups of the domain user."
  DomainUserAddRequest:
    description: "Domain user to add."
    allOf:
      - $ref: "#/definitions/DomainUser"
      - type: "object"
        properties:
          password:
            type: "string"
            format: "password"
            description: "The password of the domain user."
  Password:
    type: "object"
    properties:
      value:
        type: "string"
        format: "password"
        description: "A password."
    required:
      - value
  DnsZoneFlag:
    type: "object"
    description: "DNS Zone Flag"
    properties:
      name:
        type: "string"
        description: "The zone flag name."
    required:
      - name
  DnsDwDpZoneFlag:
    type: "object"
    description: "DNS Zone Flag"
    properties:
      name:
        type: "string"
        description: "The zone flag name."
    required:
      - name
  DnsZone:
    type: "object"
    description: "DNS Zone"
    properties:
      pszZoneName:
        type: "string"
        description: "The zone name."
      flags:
        type: "array"
        items:
          $ref: "#/definitions/DnsZoneFlag"
        description: "The zone flags."
      zoneType:
        type: "string"
        description: "The zone type."
      version:
        type: "string"
        description: "The version."
      dwDpFlags:
        type: "array"
        items:
          $ref: "#/definitions/DnsDwDpZoneFlag"
        description: "The dwDp zone flags."
      pszDpFqdn:
        type: "string"
        description: "The pszDpFqdn."
  DnsZoneCreateRequest:
    type: "object"
    description: "DNS Zone Create Request"
    properties:
      pszZoneName:
        type: "string"
        description: "The zone name."
    required:
      - pszZoneName
  DnsRecordType:
    type: "string"
    description: "DNS Record Types."
    enum:
      - "A"
      - "AAAA"
      - "PTR"
      - "CNAME"
      - "NS"
      - "MX"
      - "SRV"
      - "TXT"
      - "SOA"
      - "AFSDB"
      - "APL"
      - "CAA"
      - "CDNSKEY"
      - "CDS"
      - "CERT"
      - "DHCID"
      - "DLV"
      - "DNAME"
      - "DNSKEY"
      - "DS"
      - "HIP"
      - "IPSECKEY"
      - "KEY"
      - "KX"
      - "LOC"
      - "NAPTR"
      - "NSEC"
      - "NSEC3"
      - "NSEC3PARAM"
      - "OPENPGPKEY"
      - "RRSIG"
      - "RP"
      - "SIG"
      - "SSHFP"
      - "TA"
      - "TKEY"
      - "TLSA"
      - "TSIG"
      - "URI"
  DnsRecordRequest:
    type: "object"
    description: "DNS Record Create Request"
    properties:
      zoneName:
        type: "string"
        description: "The zone name."
      name:
        type: "string"
        description: "The record name."
      recordType:
        $ref: '#/definitions/DnsRecordType'
      data:
        type: "string"
        description: "The record data."
    required:
      - zoneName
      - name
      - recordType
      - data
  DnsRecordUpdateRequest:
    type: "object"
    description: "DNS Record Create Request"
    properties:
      zoneName:
        type: "string"
        description: "The zone name."
      name:
        type: "string"
        description: "The record name."
      recordType:
        $ref: '#/definitions/DnsRecordType'
      oldData:
        type: "string"
        description: "The old record data."
      newData:
        type: "string"
        description: "The new record data."
    required:
      - zoneName
      - name
      - recordType
      - oldData
      - newData
  DnsRecord:
    type: "object"
    description: "DNS Record"
    properties:
      recordType:
        type: "string"
        description: "The name server record type."
      recordValue:
        type: "string"
        description: "The name server record value."
      flags:
        type: "string"
        description: "The name server record flags."
      serial:
        type: "string"
        description: "The name server record serial."
      ttl:
        type: "string"
        description: "The name server record ttl."
  DnsEntry:
    type: "object"
    description: "DNS Entry"
    properties:
      name:
        type: "string"
        description: "The entry name."
      records:
        type: "array"
        items:
          $ref: "#/definitions/DnsRecord"
        description: "The name server records."
